{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11742213,"sourceType":"datasetVersion","datasetId":7371170}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/fidelroman/hexagon-mapping-by-districts-in-peru?scriptVersionId=238847616\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# Importar librerías necesarias\nimport math\nimport pandas as pd\nfrom shapely.geometry import Polygon, Point\nfrom shapely import wkt\nimport folium\nfrom IPython.display import display\nimport os\nimport random\nfrom matplotlib.colors import rgb2hex\nimport matplotlib.pyplot as plt\n\n# ---------------------------------------\n# Función para crear un hexágono\n# ---------------------------------------\ndef create_hexagon(center_lat, center_lon, radius):\n    points = []\n    for i in range(6):\n        angle = math.radians(i * 60)\n        lat = center_lat + (radius * math.sin(angle)) / 111.32\n        lon = center_lon + (radius * math.cos(angle)) / (111.32 * math.cos(math.radians(center_lat)))\n        points.append((lon, lat))\n    points.append(points[0])  # Cerrar el hexágono\n    return Polygon(points)\n\n# ---------------------------------------\n# Cargar distritos del Perú\n# ---------------------------------------\n\n# Ruta del archivo en Kaggle\nfile_path = \"/kaggle/input/peru-districts-shape/peru_districts_shape.csv\"\n\n# Verificar si el archivo existe\nif not os.path.exists(file_path):\n    raise FileNotFoundError(f\"El archivo {file_path} no fue encontrado. Verifica la ruta del dataset en Kaggle.\")\n\n# Cargar el DataFrame\ndf_districts = pd.read_csv(file_path)\ndf_districts = df_districts[df_districts[\"nombprov\"].isin([\"LIMA\", \"CALLAO\"])]\n\n# Convertir las geometrías WKT a objetos Polygon o MultiPolygon\ndistrict_polygons = []\nfor i, wkt_str in enumerate(df_districts[\"geo_shape\"]):\n    try:\n        poly = wkt.loads(wkt_str)\n        if poly.geom_type == \"Polygon\":\n            district_polygons.append((poly, df_districts.iloc[i]))\n        elif poly.geom_type == \"MultiPolygon\":\n            for sub_poly in poly.geoms:\n                district_polygons.append((sub_poly, df_districts.iloc[i]))\n    except Exception as e:\n        print(f\"Error procesando fila {i}: {e}\")\n        continue\n\n# ---------------------------------------\n# Función principal por ciudad\n# ---------------------------------------\ndef procesar_ciudad(ciudad, center_lon, center_lat, radius=0.5, n_rows=20, n_cols=20):\n    print(f\"Procesando ciudad: {ciudad}...\")\n    hex_records = []\n    zone_id = 1\n\n    # Ajustar el radio para evitar solapamientos y mantener la geometría hexagonal\n    dx = 3/2 * radius / 111.32\n    dy = math.sqrt(3) * radius / 111.32\n\n    for row in range(n_rows):\n        for col in range(n_cols):\n            # Calcular los offsets\n            offset_x = col * dx\n            offset_y = row * dy + (col % 2) * (dy / 2)\n\n            # Calcular coordenadas del centro del hexágono\n            hex_center_lat = center_lat + offset_y\n            hex_center_lon = center_lon + offset_x / math.cos(math.radians(center_lat))\n\n            # Crear el hexágono\n            hexagon = create_hexagon(hex_center_lat, hex_center_lon, radius)\n\n            # Verificar si el hexágono está contenido en algún distrito\n            hex_contained = False\n            for poly, dist_row in district_polygons:\n                if poly.intersects(hexagon):\n                    hex_records.append({\n                        \"hexagono_id\": f\"zona_{zone_id:06d}\",\n                        \"hexagono_shape\": hexagon.wkt,\n                        \"centroid_lat\": hex_center_lat,\n                        \"centroid_lon\": hex_center_lon,\n                        \"nombdep\": dist_row[\"nombdep\"],\n                        \"nombprov\": dist_row[\"nombprov\"],\n                        \"nombdist\": dist_row[\"nombdist\"]\n                    })\n                    hex_contained = True\n                    break\n\n            if hex_contained:\n                zone_id += 1\n\n    # Crear DataFrame con los hexágonos válidos\n    df_final = pd.DataFrame(hex_records)\n\n    # Mostrar las primeras 5 filas del dataset final\n    print(\"First 5 rows of the final dataset:\")\n    display(df_final.head())\n\n    # Visualizar en Folium\n    visualizar_en_folium(df_final)\n\n# ---------------------------------------\n# Función para visualizar en Folium\n# ---------------------------------------\ndef visualizar_en_folium(df):\n    # Centro del mapa en el primer hexágono\n    if not df.empty:\n        start_lat = df[\"centroid_lat\"].iloc[0]\n        start_lon = df[\"centroid_lon\"].iloc[0]\n    else:\n        start_lat, start_lon = -12.0464, -77.0428  # Lima, Perú\n\n    # Crear el mapa centrado\n    m = folium.Map(location=[start_lat, start_lon], zoom_start=14)\n\n    # Asignar un color único a cada distrito usando una paleta de colores actualizada\n    unique_districts = df[\"nombdist\"].unique()\n    cmap = plt.colormaps[\"tab20\"]\n\n    # Generar los colores\n    colors = [rgb2hex(cmap(i / len(unique_districts))) for i in range(len(unique_districts))]\n    color_map = {dist: colors[i] for i, dist in enumerate(unique_districts)}\n\n    # Añadir los hexágonos al mapa\n    for _, row in df.iterrows():\n        # Convertir WKT a Polígono\n        polygon = wkt.loads(row[\"hexagono_shape\"])\n\n        # Obtener el color del distrito\n        district_color = color_map[row[\"nombdist\"]]\n\n        # Crear GeoJSON para agregar al mapa\n        folium.GeoJson(\n            polygon,\n            style_function=lambda x, color=district_color: {\n                \"color\": color,\n                \"weight\": 1,\n                \"fillOpacity\": 0.5\n            },\n            tooltip=f\"ID: {row['hexagono_id']}<br>Distrito: {row['nombdist']}<br>Provincia: {row['nombprov']}<br>Departamento: {row['nombdep']}\"\n        ).add_to(m)\n\n    # Mostrar el mapa directamente en el notebook\n    display(m)\n\n# ---------------------------------------\n# Ejecución del proceso en Kaggle\n# ---------------------------------------\nciudad = \"LIMA\"\ncenter_lon = -77.1864123  # Ajustado al centro de Lima\ncenter_lat = -12.656899  # Ajustado al centro de Lima\n\n# Generar hexágonos y visualizar\nprocesar_ciudad(ciudad, center_lon, center_lat, radius=0.5, n_rows=150, n_cols=65)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-10T03:26:14.90602Z","iopub.execute_input":"2025-05-10T03:26:14.906468Z","iopub.status.idle":"2025-05-10T03:26:31.061963Z","shell.execute_reply.started":"2025-05-10T03:26:14.906438Z","shell.execute_reply":"2025-05-10T03:26:31.06078Z"}},"outputs":[],"execution_count":null}]}